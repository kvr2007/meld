#!/usr/bin/env python3
__description__ = 'Set up files to run MELD/CryoFold 2. Based on https://github.com/ccccclw/meld/blob/master/docs/tutorial/cryofold_tutorial/setup_cryofold.py'
# encoding: utf-8
import numpy as np
import argparse
import meld
from meld import system
from meld.comm import MPICommunicator
from meld import comm, vault
from meld import system
from meld.remd import ladder, adaptor, leader
from meld.system.scalers import LinearRamp,ConstantRamp
import openmm.unit as u

class MeldSetup:
    # a simple class to handle the MELD setup
    # TODO dtype checks
    def __init__(self, n_replicas=8, n_steps=500, block_size=20):
       self.N_REPLICAS = n_replicas
       self.N_STEPS = n_steps
       self.BLOCK_SIZE = block_size

    ''' NOTE not used in the script, so commented out
    def gen_state_templates(self, index, templates):                                           
        n_templates = len(templates)
        print((index,n_templates,index%n_templates))
        a = system.subsystem.SubSystemFromPdbFile(templates[index%n_templates])
        #Note that it does not matter which forcefield we use here to build
        #as that information is not passed on, it is used for all the same as
        #in the setup part of the script
        b = system.builder.SystemBuilder(forcefield="ff14sbside")
        c = b.build_system([a])
        pos = c._coordinates
        c._box_vectors=np.array([0.,0.,0.])
        vel = np.zeros_like(pos)
        alpha = index / (self.N_REPLICAS - 1.0)
        energy = 0
        return system.state.SystemState(pos, vel, alpha, energy,c._box_vectors)
    '''
    def gen_state(self, s, index):
        state = s.get_state_template()
        state.alpha = index / (self.N_REPLICAS - 1.0)
        return state

    def setup_system(self, template, denmap, forcefield='ff14sbside', implicit_solvent_model='gbNeck2'):
        '''
        Prepare all necessary files for MELD run
        
        Parameters
        ----------
        template
            path to the model PDB file
        denmap
            path to the cryo-EM density map in MRC format
        
        TODO
        ----
        * adding other restraints, e.g. the positional restraints from ModelAngelo model or distance restraints from evolutionary coupling, crosslinks, etc
        '''
        #template = "./1ake_s.pdb"
        #template = './model.pdb' 
        p = meld.AmberSubSystemFromPdbFile(template)
        build_options = meld.AmberOptions(
            forcefield=forcefield,
            implicit_solvent_model=implicit_solvent_model,
            use_big_timestep=True, # 3.5 fs timestep with hydrogen mass repartitioning
            cutoff=1.8*u.nanometer
        )
        builder = meld.AmberSystemBuilder(build_options)
        s = builder.build_system([p]).finalize()
        s.temperature_scaler = meld.ConstantTemperatureScaler(300.0 * u.kelvin)  #
        n_res = s.residue_numbers[-1]
        all_atoms=[]
        map_restraints = []
        dist_scaler = s.restraints.create_scaler('constant')
        blur_scaler = s.restraints.create_scaler(
            "linear_blur",alpha_min=0, alpha_max=1, 
            min_blur=0, max_blur=2, num_replicas=self.N_REPLICAS
        )
        for i in range(len(s.residue_numbers)):
          if 'H' not in s.atom_names[i]:
            all_atoms.append(s.index.atom(resid=s.residue_numbers[i],atom_name=s.atom_names[i]))
        density_map=s.density.add_density(denmap, blur_scaler,0,0.3)
        r = s.restraints.create_restraint(
            "density",
            dist_scaler,
            LinearRamp(0,100,0,1),
            atom=all_atoms,
            density=density_map
        )
        map_restraints.append(r)
        s.restraints.add_as_always_active_list(map_restraints)


        # create the options
        # see also: https://github.com/maccallumlab/meld/blob/master/docs/tutorial/getting_started.rst#setting-up-the-system
        options = meld.RunOptions(
            timesteps = 100,
            minimize_steps = 100
        )
     
        # create a store
        store = vault.DataStore(self.gen_state(s,0), self.N_REPLICAS, s.get_pdb_writer(), block_size=self.BLOCK_SIZE)
        store.initialize(mode='w')
        store.save_system(s)
        store.save_run_options(options)
     
        # create and store the remd_runner
        l = ladder.NearestNeighborLadder(n_trials=100)
        policy = adaptor.AdaptationPolicy(2.0, 50, 50)
        a = adaptor.EqualAcceptanceAdaptor(n_replicas=self.N_REPLICAS, adaptation_policy=policy)
     
        remd_runner = leader.LeaderReplicaExchangeRunner(self.N_REPLICAS, max_steps=self.N_STEPS, ladder=l, adaptor=a)
        store.save_remd_runner(remd_runner)
     
        # create and store the communicator
        c = comm.MPICommunicator(s.n_atoms, self.N_REPLICAS)
        store.save_communicator(c)
     
        # create and save the initial states
        states = [self.gen_state(s, i) for i in range(self.N_REPLICAS)]                                  
        store.save_states(states, 0)
     
        # save data_store
        store.save_data_store()

def get_cli():
    # defines argument parser and returns commandline arguments
    parser = argparse.ArgumentParser(description=__description__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('map', help='Path to the cryo-EM map in MRC format')
    parser.add_argument('model', help='Path to the starting model in PDB format; the model needs to be roughly placed into the map density')
    parser.add_argument('--n-replicas', default=8, type=int, help='Number of replicas')
    parser.add_argument('--n-steps', default=500, type=int, help='Number of steps for each replica')
    parser.add_argument('--block-size', default=500, type=int, help='Number of steps for saving trajectory')
    # NOTE available force fields are listed here:
    # https://github.com/maccallumlab/meld/blob/master/docs/tutorial/getting_started.rst
    # TODO how to set different force fields for different parts of the model (e.g. protein or nucleic acids?)
    parser.add_argument('--force-field', '--ff', default='ff14sbside', choices=('ff12sb', 'ff14sbside', 'ff14sb'), help='Force field to be used in simulation')
    # TODO other solvent options?
    parser.add_argument('--implicit-solvent-model', '--ism', default='gbNeck2', help='Implicit solvent model for the simulation')
    return parser.parse_args()

if __name__ == '__main__':
    args = get_cli()
    setup_handler = MeldSetup(n_replicas = args.n_replicas, n_steps = args.n_steps, block_size = args.block_size)
    setup_handler.setup_system(template = args.model, denmap = args.map, forcefield = args.force_field, implicit_solvent_model=args.implicit_solvent_model)

